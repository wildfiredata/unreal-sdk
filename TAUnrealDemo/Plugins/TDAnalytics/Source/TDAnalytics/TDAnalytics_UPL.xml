<root xmlns:android="http://schemas.android.com/apk/res/android">

    <resourceCopies>
    <copyFile  src = "$S(PluginDir)/../ThirdParty/Android/TDAnalytics.aar"  dst = "$S(BuildDir)/gradle/app/libs/TDAnalytics.aar" /> 
    <copyFile  src = "$S(PluginDir)/../ThirdParty/Android/TDCore.aar"  dst = "$S(BuildDir)/gradle/app/libs/TDCore.aar" /> 
    </resourceCopies>
    <buildGradleAdditions>
        <insert>
            dependencies {
                implementation files('libs/TDAnalytics.aar')
                implementation files('libs/TDCore.aar')
            }
        </insert>
    </buildGradleAdditions>
    <androidManifestUpdates>
        <addPermission android:name="android.permission.INTERNET" />
        <addPermission android:name="android.permission.ACCESS_NETWORK_STATE" />
    </androidManifestUpdates>
    <gameActivityImportAdditions>
        <insert>
            import android.app.Application;
            import android.text.TextUtils;
            import cn.thinkingdata.analytics.*;
            import java.util.TimeZone;
            import org.json.JSONObject;
            import org.json.JSONException;
            import java.util.ArrayList;
            import android.text.TextUtils;
            import java.util.Map;
            import java.util.HashMap;
            import java.util.List;
            import java.util.Arrays;
            import java.lang.reflect.Field;
            import java.lang.reflect.Method;
            import java.util.Iterator;
            import cn.thinkingdata.analytics.encrypt.TDSecreteKey;
        </insert>
    </gameActivityImportAdditions>
    <gameActivityClassAdditions>
        <insert>
            <![CDATA[
            public static final String APP_CLICK_EVENT_NAME = "ta_app_click";
            public static final String APP_VIEW_EVENT_NAME = "ta_app_view";
            public static final String APP_START_EVENT_NAME = "ta_app_start";
            public static final String APP_END_EVENT_NAME = "ta_app_end";
            public static final String APP_CRASH_EVENT_NAME = "ta_app_crash";
            public static final String APP_INSTALL_EVENT_NAME = "ta_app_install";
            static Map sInstances = new HashMap();
            static ArrayList sAppIds = new ArrayList();
            
            public static ThinkingAnalyticsSDK taGetCurrentInstance(String appid) {
                
                if (appid.length()>0){
                    if (sInstances.containsKey(appid)) {
                        return (ThinkingAnalyticsSDK)sInstances.get(appid);
                    }
                } else if (sAppIds.size() >0 ){
                    String appid1 = (String)sAppIds.get(0);
                    if (sInstances.containsKey(appid1)) {
                        return (ThinkingAnalyticsSDK)sInstances.get(appid1);
                    }
                }
                return null;
            }
                
            public String taGetCurrentAppId(String appid) {
                if (appid.length()>0){
                    return appid;
                } else if (sAppIds.size() >0 ){
                    return (String)sAppIds.get(0);
                } else {
                    return "";
                }
            }
            
            public void taInitialize(String appId, String serverUrl, int mode, String timeZone, String version) {
            
                ThinkingAnalyticsSDK mInstance = (ThinkingAnalyticsSDK)sInstances.get(appId);
                if (mInstance == null) {
                    ThinkingAnalyticsSDK.setCustomerLibInfo("Unreal", version);
                    TDConfig config = TDConfig.getInstance((Application) getApplicationContext(), appId, serverUrl);
                    setDisableProperties();
                    if (mode == 1) {
                        config.setMode(TDConfig.ModeEnum.DEBUG);
                    } else if (mode == 2) {
                        config.setMode(TDConfig.ModeEnum.DEBUG_ONLY);
                    } else {
                        config.setMode(TDConfig.ModeEnum.NORMAL);
                    }
                    if (!TextUtils.isEmpty(timeZone)) {
                        config.setDefaultTimeZone(TimeZone.getTimeZone(timeZone));
                    
                    }
                    mInstance = ThinkingAnalyticsSDK.sharedInstance(config);
                    sInstances.put(appId, mInstance);
                    sAppIds.add(appId);
                }
            }

            public void taInitialize(String appId, String serverUrl, int mode, String timeZone, String version, String publicKey, int encryptVersion, String symmetricEncryption, String asymmetricEncryption) {
            
                ThinkingAnalyticsSDK mInstance = (ThinkingAnalyticsSDK)sInstances.get(appId);
                if (mInstance == null) {
                    ThinkingAnalyticsSDK.setCustomerLibInfo("Unreal", version);
                    TDConfig config = TDConfig.getInstance((Application) getApplicationContext(), appId, serverUrl);
                    setDisableProperties();
                    if (mode == 1) {
                        config.setMode(TDConfig.ModeEnum.DEBUG);
                    } else if (mode == 2) {
                        config.setMode(TDConfig.ModeEnum.DEBUG_ONLY);
                    } else {
                        config.setMode(TDConfig.ModeEnum.NORMAL);
                    }
                    config.enableEncrypt(true);
                    config.setSecretKey(new TDSecreteKey(publicKey, encryptVersion, symmetricEncryption, asymmetricEncryption));
                    if (!TextUtils.isEmpty(timeZone)) {
                        config.setDefaultTimeZone(TimeZone.getTimeZone(timeZone));
                    
                    }
                    mInstance = ThinkingAnalyticsSDK.sharedInstance(config);
                    sInstances.put(appId, mInstance);
                    sAppIds.add(appId);
                }
            }
            
            private static final int TA_USER_SET = 0;
            private static final int TA_USER_SET_ONCE = 1;
            private static final int TA_USER_APPEND = 2;
            private static final int TA_USER_UNSET = 3;
            private static final int TA_USER_ADD = 4;
            private static final int TA_USER_UNIQUE_APPEND = 5;
            
            
            public JSONObject taCombineJson(String properties, String dyldProperties) {
            
                JSONObject json = new JSONObject();
                JSONObject propertiesObj = null;
                JSONObject dyldpropertiesObj = null;
                
                try {
                    propertiesObj = new JSONObject(properties);
                } catch(Exception e) {
                    // ignore
                }
                
                try {
                    dyldpropertiesObj = new JSONObject(dyldProperties);
                } catch(Exception e) {
                    // ignore
                }
                
                if (dyldpropertiesObj != null) {
                    Iterator iter = dyldpropertiesObj.keys();
                    while (iter.hasNext()) {
                        String key = (String) iter.next();
                        try {
                            json.put(key, dyldpropertiesObj.get(key));
                        } catch(Exception e) {
                            // ignore
                        }
                        
                    }
                }
                
                if (propertiesObj != null) {
                    Iterator iter = propertiesObj.keys();
                    while (iter.hasNext()) {
                        String key = (String) iter.next();
                        try {
                            json.put(key, propertiesObj.get(key));
                        } catch(Exception e) {
                            // ignore
                        }
                        
                    }
                }
                
                return json;
            }
            
            public void taTrack(String eventName, String properties, String dyldProperties, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.track(eventName, taCombineJson(properties, dyldProperties));
                }
            }
            
            public void taTrackFirst(String eventName, String properties, String firstCheckId, String dyldProperties, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    TDFirstEvent event = new TDFirstEvent(eventName, taCombineJson(properties, dyldProperties));
                    if (TextUtils.isEmpty(firstCheckId)) {
                        mInstance.track(event);
                    } else {
                        event.setFirstCheckId(firstCheckId);
                        mInstance.track(event);
                    }
                }
            }

            public void taTrackUpdate(String eventName, String properties, String eventId, String dyldProperties,String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.track(new TDUpdatableEvent(eventName, taCombineJson(properties, dyldProperties), eventId));
                }
            }

            public void taTrackOverwrite(String eventName, String properties, String eventId, String dyldProperties, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.track(new TDOverWritableEvent(eventName, taCombineJson(properties, dyldProperties), eventId));
                }
            }

            public void taUserOperations(int type, String properties, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    if (TA_USER_UNSET == type) {
                        mInstance.user_unset(properties);
                        return;
                    }
                    
                    JSONObject propertiesObj = null;
                    try {
                        propertiesObj = new JSONObject(properties);
                    } catch(Exception e) {
                        // ignore
                    }
                    if (TA_USER_SET == type) {
                        mInstance.user_set(propertiesObj);
                    } else if (TA_USER_SET_ONCE == type) {
                        mInstance.user_setOnce(propertiesObj);
                    } else if (TA_USER_APPEND == type) {
                        mInstance.user_append(propertiesObj);
                    } else if (TA_USER_ADD == type) {
                        mInstance.user_add(propertiesObj);
                    } else if (TA_USER_UNIQUE_APPEND == type) {
                        mInstance.user_uniqAppend(propertiesObj);
                    }
                }
            }

            public void taSetTrackStatus(String status, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.setTrackStatus(ThinkingAnalyticsSDK.TATrackStatus.valueOf(status));
               }
            }
            
            public void taTimeEvent(String eventName, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.timeEvent(eventName);
                }
            }

            public void taUserDelete(String appid) {
            ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.user_delete();
                }
            }
            
            public void taLogin(String accountId, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.login(accountId);
                }
            }
            public void taIdentify(String distinctId, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.identify(distinctId);
                }
            }
            
            public void taLogout(String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.logout();
                }
            }
            
            public void taFlush(String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.flush();
                }
            }
            
            public void taEnableAutoTrack(String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    // START, END, INSTALL
                    List<ThinkingAnalyticsSDK.AutoTrackEventType> typeList = new ArrayList<>();
                    typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_START);
                    typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_INSTALL);
                    typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_END);
                    mInstance.enableAutoTrack(typeList);
                }
            }
            
            public void taEnableAutoTrack(String appid, String[] eventTypeList) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    List<ThinkingAnalyticsSDK.AutoTrackEventType> typeList = new ArrayList<>();
                    for (String eventType : eventTypeList) {
                        if (eventType.equals(APP_START_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_START);
                        } else if (eventType.equals(APP_INSTALL_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_INSTALL);
                        } else if (eventType.equals(APP_END_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_END);
                        } else if (eventType.equals(APP_CLICK_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_CLICK);
                        } else if (eventType.equals(APP_CRASH_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_CRASH);
                        } else if (eventType.equals(APP_VIEW_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_VIEW_SCREEN);
                        }
                    }
                    mInstance.enableAutoTrack(typeList);
                }
            }

            public void taEnableAutoTrack(String appid, String[] eventTypeList, String properties) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    List<ThinkingAnalyticsSDK.AutoTrackEventType> typeList = new ArrayList<>();
                    for (String eventType : eventTypeList) {
                        if (eventType.equals(APP_START_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_START);
                        } else if (eventType.equals(APP_INSTALL_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_INSTALL);
                        } else if (eventType.equals(APP_END_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_END);
                        } else if (eventType.equals(APP_CLICK_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_CLICK);
                        } else if (eventType.equals(APP_CRASH_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_CRASH);
                        } else if (eventType.equals(APP_VIEW_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_VIEW_SCREEN);
                        }
                    }
                    JSONObject jsonObject = null;
                    try {
                        jsonObject = new JSONObject(properties);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    mInstance.enableAutoTrack(typeList, jsonObject);
                }
            }

            public void taOptOutTracking(String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.optOutTracking();
                }
            }
            
            public void taOptInTracking(String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.optInTracking();
                }
            }
            
            public void taEnableTracking(boolean enabled, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.enableTracking(enabled);
                }
            }

            public void taEnableThirdPartySharing(int types, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    mInstance.enableThirdPartySharing(types);
                }
            }

            public void taEnableThirdPartySharing(int types, String properties, String appid) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    Map<String, Object> map = new HashMap<>();
                    try {
                        JSONObject json = new JSONObject(properties);
                        for (Iterator<String> it = json.keys(); it.hasNext(); ) {
                            String key = it.next();
                            map.put(key, json.optString(key));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    mInstance.enableThirdPartySharing(types, map);
                }
            }

            public String taGetDistinctId(String appid)
            {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                 if (null != mInstance) {
                    return mInstance.getDistinctId();
                }
                return "";
            }

            public String taGetDeviceId(String appid)
            {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                 if (null != mInstance) {
                    return mInstance.getDeviceId();
                }
                return "";
            }

            public void taCalibrateTimeWithNtp(String ntpServer)
            {
                ThinkingAnalyticsSDK.calibrateTimeWithNtp(ntpServer);
            }
            
            public void taSetSuperProperties(String properties, String appid)
            {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    JSONObject propertiesObj = null;
                    try {
                        propertiesObj = new JSONObject(properties);
                    } catch(Exception e) {
                        // ignore
                    }
                    mInstance.setSuperProperties(propertiesObj);
               }
            }
            
            public String taGetSuperProperties(String appid)
            {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    JSONObject properties1 =  mInstance.getSuperProperties();
                    return properties1.toString();
                }
               return "";
            }
            
            
            public String taGetPresetProperties(String appid)
            {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    TDPresetProperties presetProperties = mInstance.getPresetProperties();
                    JSONObject properties = presetProperties.toEventPresetProperties();
                    return properties.toString();
               }
               return "";
            }
            
            public String taCreateLightInstance(String appid)
            {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid).createLightInstance();
                String token =  UUID.randomUUID().toString();
                sInstances.put(token,mInstance);
                return token;
            }

            public native String getAutoTrackEventProperties(String eventType, String properties, String appid);


            public void taEnableAutoTrackWithListener(final String appid, String[] eventTypeList) {
                ThinkingAnalyticsSDK mInstance =  taGetCurrentInstance(appid);
                if (null != mInstance) {
                    List<ThinkingAnalyticsSDK.AutoTrackEventType> typeList = new ArrayList<>();
                    for (String eventType : eventTypeList) {
                        if (eventType.equals(APP_START_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_START);
                        } else if (eventType.equals(APP_INSTALL_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_INSTALL);
                        } else if (eventType.equals(APP_END_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_END);
                        } else if (eventType.equals(APP_CLICK_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_CLICK);
                        } else if (eventType.equals(APP_CRASH_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_CRASH);
                        } else if (eventType.equals(APP_VIEW_EVENT_NAME)) {
                            typeList.add(ThinkingAnalyticsSDK.AutoTrackEventType.APP_VIEW_SCREEN);
                        }
                    }
                    mInstance.enableAutoTrack(typeList, new ThinkingAnalyticsSDK.AutoTrackEventListener() {
                        @Override
                        public JSONObject eventCallback(ThinkingAnalyticsSDK.AutoTrackEventType autoTrackEventType, JSONObject jsonObject) {
                            String eventType = "";
                            if (autoTrackEventType.equals(ThinkingAnalyticsSDK.AutoTrackEventType.APP_START)) {
                                eventType = APP_START_EVENT_NAME;
                            } else if (autoTrackEventType.equals(ThinkingAnalyticsSDK.AutoTrackEventType.APP_END)) {
                                eventType = APP_END_EVENT_NAME;
                            } else if (autoTrackEventType.equals(ThinkingAnalyticsSDK.AutoTrackEventType.APP_VIEW_SCREEN)) {
                                eventType = APP_VIEW_EVENT_NAME;
                            } else if (autoTrackEventType.equals(ThinkingAnalyticsSDK.AutoTrackEventType.APP_CRASH)) {
                                eventType = APP_CRASH_EVENT_NAME;
                            } else if (autoTrackEventType.equals(ThinkingAnalyticsSDK.AutoTrackEventType.APP_INSTALL)) {
                                eventType = APP_INSTALL_EVENT_NAME;
                            } else if (autoTrackEventType.equals(ThinkingAnalyticsSDK.AutoTrackEventType.APP_CLICK)) {
                                eventType = APP_CLICK_EVENT_NAME;
                            }
                            JSONObject retJSONObject = null;
                            try {
                                retJSONObject = new JSONObject(getAutoTrackEventProperties(eventType, jsonObject.toString(), appid));
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                            return retJSONObject;
                        }
                    });
                }
            }

            public static void setDisableProperties() {
                try {
                    Class<?> presetClazz = Class.forName("cn.thinkingdata.analytics.TDPresetProperties");
                    Field field = presetClazz.getField("disableList");
                    field.setAccessible(true);
                    Class<?> listClazz = field.getType();
                    Method toArrayMethod = listClazz.getMethod("toArray", Object[].class);
                    Method sizeMethod = listClazz.getMethod("size");
                    int size = Integer.parseInt(String.valueOf(sizeMethod.invoke(field.get(presetClazz))));
                    if (size != 0) {
                        String[] array = (String[]) toArrayMethod.invoke(field.get(presetClazz), new Object[size]);
                        if (array != null) {
                            if (!Arrays.asList(array).contains("#fps")) {
                                Method addAllMethod = listClazz.getMethod("add", Object.class);
                                addAllMethod.invoke(field.get(presetClazz), "#fps");
                            }
                        }
                    } else {
                        Method addAllMethod = listClazz.getMethod("add", Object.class);
                        addAllMethod.invoke(field.get(presetClazz), "#fps");
                    }
                } catch (Exception e) {
                    //ignored
                }
            }
            ]]>
        </insert>
    </gameActivityClassAdditions>
</root>
